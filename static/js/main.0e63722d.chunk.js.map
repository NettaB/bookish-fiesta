{"version":3,"sources":["http-service.js","formatter-util.js","graph.js","App.js","serviceWorker.js","index.js"],"names":["URL","data","geocode","lon","lat","start_time","Date","toISOString","end_time","timestep","fields","name","units","options","method","headers","Content-Type","apiKey","body","JSON","stringify","dateOptions","hour","minute","timeZone","hour12","speedFormatter","val","concat","timeFormatter","timeStamp","toLocaleTimeString","Graph","props","react_default","a","createElement","className","es","width","height","margin","top","right","bottom","left","title","position","tickFormat","colorType","color","sizeRange","App","_useState","useState","dataList","maximum","_useState2","Object","slicedToArray","setData","_useState3","_useState4","errorMessage","setErrorMessage","dataPointFactory","dataPoint","x","observation_time","value","getTime","y","wind_gust","size","findMax","acc","currentValue","currentIndex","objectSpread","i","useEffect","fetch","then","response","ok","Error","statusText","json","catch","console","error","resultList","map","reduce","createData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e63722d.chunk.js","sourcesContent":["const URL = 'https://api2.climacell.co/v2/historical';\nconst API_KEY = 'mFW54hIC4r5puNkKBrcfQ3Xy3dqFYXCJ';\nconst START_TIME = new Date('March 18, 2018 04:00:00 UTC').toISOString();\nconst END_TIME = new Date('March 19, 2018 03:59:59 UTC').toISOString();\n\nconst data = {\n  geocode: {\n    lon: -71.3120271,\n    lat: 44.2705999\n  },\n  start_time: START_TIME,\n  end_time: END_TIME,\n  timestep: 1,\n  fields: [\n    {\n      name: \"wind_gust\",\n      units: \"kph\"\n    }\n  ]\n};\n\nconst options = {\n  method: 'POST',\n  headers:{\n    'Content-Type': 'application/json',\n    'apiKey': API_KEY\n  },\n  body: JSON.stringify(data)\n};\n\n\nexport default function fetchData() {\n  return fetch(URL, options)\n    .then(response => {\n      if(response.ok) {\n        return response;\n      }\n      throw Error(response.statusText);\n    })\n    .then(response => response.json())\n    .catch(errorMessage => {\n      console.error(errorMessage);\n      return null;\n    });\n}\n","const dateOptions = {hour: '2-digit', minute: '2-digit', timeZone: 'America/New_York', hour12: false};\n\nexport const speedFormatter = val => `${val} kph`;\nexport const timeFormatter = timeStamp => new Date(timeStamp).toLocaleTimeString('en-US',dateOptions);\n","import React from 'react';\nimport { XYPlot, XAxis, YAxis, MarkSeries } from 'react-vis';\nimport { timeFormatter, speedFormatter} from './formatter-util';\n\nexport default function Graph(props) {\n  return (\n    <div className='graph-container'>\n      <XYPlot width={2400} height={400} margin={{top: 20, right: 20, bottom: 60, left: 80}}>\n        <XAxis title={'Time'} position='middle' tickFormat={timeFormatter}/>\n        <YAxis title={'Gust Speed'} position='middle' tickFormat={speedFormatter}/>\n        <MarkSeries data={props.data} colorType='literal' color='royalblue' className='foo' sizeRange={[1,4]}/>\n      </XYPlot>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport fetchData from './http-service';\nimport Graph from './graph';\nimport { timeFormatter } from './formatter-util';\n\nconst App = () => {\n  const [data, setData] = useState({dataList: null, maximum: null});\n  const [errorMessage, setErrorMessage] = useState(null);\n\n\n  const dataPointFactory = dataPoint => ({\n    x: new Date(dataPoint.observation_time.value).getTime(),\n    y: dataPoint.wind_gust.value,\n    size: 1\n  });\n  const findMax = (acc, currentValue, currentIndex) => {\n    if (currentValue.y > acc.y) {\n      acc = {...currentValue};\n      acc.i = currentIndex;\n    }\n    return acc;\n  };\n  const createData = resultList => {\n    const dataList = resultList.map(dataPointFactory);\n    const maximum = dataList.reduce(findMax, {y: 0, x: 0, i: 0});\n    dataList[maximum.i].color = 'indianred';\n    dataList[maximum.i].size = '4';\n    return {dataList, maximum}\n  };\n\n  useEffect(() => {\n    if(!data.dataList) {\n      fetchData().then(resultList => {\n        if (!resultList) {\n          setErrorMessage('Could not fetch data, retrying');\n          return;\n        }\n        const data = createData(resultList);\n        setData(data);\n        setErrorMessage(null);\n      })\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>\n        March 18 2018, Mount Washington NH\n      </h1>\n      {errorMessage && <h3 className='error'>{errorMessage}</h3>}\n      {data.maximum ?\n        <h3>Hats are most likely to fly at {timeFormatter(data.maximum.x)} with a wind gust speed of {data.maximum.y} kph</h3> :\n        <h3 className='loading'>Loading...</h3>}\n      {data.dataList && <Graph data={data.dataList}/>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}